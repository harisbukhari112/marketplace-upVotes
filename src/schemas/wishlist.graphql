"The wishlist holds selected items until they are added to cart."
type Wishlist implements Node {
  "The Wishlist ID"
  _id: ID!

  """
  The account that owns the wishlist. Every account has exactly one wishlist per shop.
  """
  account: Account

  "The date and time at which the wishlist was created, which is when the first item was added to it."
  createdAt: DateTime!

  "An email address that has been associated with the wishlist"
  email: String

  "The items that have been added to the wishlist. A wishlist is not created until the first item is added. Items can be removed from a wishlist, and a wishlist is not deleted if all items are removed from it. Because all items may have been removed, this may be an empty array."
  items(
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor,

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor,

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int,

    "Return results sorted in this order"
    sortOrder: SortOrder = desc,

    "By default, items are sorted by when they were added to the wishlist, newest first. Set this to sort by one of the other allowed fields"
    sortBy: WishlistItemsSortByField = addedAt
  ): WishlistItemConnection

  """
  If any products or variants become hidden or are deleted after they were added to this wishlist, they'll be
  automatically moved from `items` to `missingItems`. Clients may want to use this to show an
  "items that are no longer available" list to storefront users.

  If a product becomes visible again, the item will never be automatically moved from `missingItems`
  back to `items`, but clients may want to provide a way for users to manually do this.
  """
  missingItems: [WishlistItem]

  "The shop that owns the wishlist."
  shop: Shop!

  "The date and time at which this wishlist was last updated."
  updatedAt: DateTime!
}

"Allowed values for wishlist item sortBy parameter"
enum WishlistItemsSortByField {
  "Wishlist item ID"
  _id

  "Date and time at which the item was added to the wishlist"
  addedAt
}

"""
Wraps a list of `WishlistItem`s, providing pagination cursors and information.

For information about what Relay-compatible connections are and how to use them, see the following articles:
- [Relay Connection Documentation](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#connections)
- [Relay Connection Specification](https://facebook.github.io/relay/graphql/connections.htm)
- [Using Relay-style Connections With Apollo Client](https://www.apollographql.com/docs/react/recipes/pagination.html)
"""
type WishlistItemConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [WishlistItemEdge]

  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [WishlistItem]

  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!

  "The total number of nodes that match your query"
  totalCount: Int!
}

"A connection edge in which each node is a `WishlistItem` object"
type WishlistItemEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!

  "The wishlist item"
  node: WishlistItem
}

"One attribute of a wishlist item"
type WishlistItemAttribute {
  "The attribute label, e.g., Color"
  label: String

  "The attribute value, e.g., Blue"
  value: String
}

"""
A single item in a wishlist. The item contains information about an intended purchase.
"""
type WishlistItem implements Node {
  "The wishlist item ID"
  _id: ID!

  """"
  The date and time at which this item was first added to the associated wishlist.
  If an item is added, removed, and then added again, this will reflect the most recent addition.
  However, if an item is added twice, the quantity will increase but this date will remain
  the initial added date.
  """
  addedAt: DateTime!

  """
  FUTURE. Additional attributes of the chosen item. For example, if this item is for a product, socks, where `blue` and `small`
  options were chosen for some configurable attributes, then `color:blue` and `size:small` will be indicated here.
  """
  attributes: [WishlistItemAttribute]

  "The current comparison (e.g., MSRP) price of the item"
  compareAtPrice: Money

  """
  The date and time at which the wishlist item was created. If an item is added, removed, and then added again,
  the original item is destroyed and this field will reflect the time it was created for the most recent addition.
  """
  createdAt: DateTime!

  "The URLs for a picture of the item in various sizes"
  imageURLs: ImageSizes

  "Arbitrary additional metadata about this wishlist item."
  metafields: [Metafield]

  "The selected variant optionTitle"
  optionTitle: String

  "The current price of the item"
  price: Money!

  # This will permit us to perform calculations based on how the price has changed since
  # the item was added to the wishlist.
  "The price at which this item was listed when it was added to the wishlist"
  priceWhenAdded: Money!

  "The product and chosen options"
  productConfiguration: ProductConfiguration!

  "The product's slug"
  productSlug: String

  "The list of tags that have been applied to this product"
  productTags(
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor,

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor,

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt,

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt,

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int,

    "Return results sorted in this order"
    sortOrder: SortOrder = asc,

    "By default, tags are sorted by ID. Set this to sort by one of the other allowed fields"
    sortBy: TagSortByField = _id
  ): TagConnection

  "The type of product, used to display wishlist items differently"
  productType: String

  "The product vendor"
  productVendor: String

  "The shop associated with this wishlist item."
  shop: Shop!

  "A title that conveys the selected product's title + chosen options"
  title: String!

  "The date and time at which this item was last updated"
  updatedAt: DateTime!

  "The selected variant title"
  variantTitle: String
}

####################
# Queries
####################

extend type Query {
  # Access control should ensure that only authenticated users can find their own
  # wishlist. Additionally, administrative roles can find wishlists.
  # Shop ID is necessary if shops have separate wishlists but share the same account pool
  "Find a wishlist for a given account ID."
  wishlistByAccountId(
    "Account that owns the wishlist"
    accountId: ID!,

    "Shop that owns the wishlist"
    shopId: ID!
  ): Wishlist
}

####################
# Inputs
####################

"The input necessary to create a wishlist"
input CreateWishlistInput {
  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "Array of items to add to new wishlist."
  items: [WishlistItemInput]!

  "ShopId association for the wishlist."
  shopId: ID!
}

"Information about an item to add to a wishlist"
input WishlistItemInput {
  "Arbitrary additional metadata about this wishlist item."
  metafields: [MetafieldInput]

  """
  The price of this item, for validating that this matches the actual price in the system,
  in case the client has stale data.
  """
  price: MoneyInput!

  "The product and chosen options"
  productConfiguration: ProductConfigurationInput!
}

# "Input that defines a single configuration of a product"
# input ProductConfigurationInput {
#   "The Product ID"
#   productId: ID!

#   "The ProductVariant ID"
#   productVariantId: ID!
# }

"Input for the `addWishlistItems` mutation"
input AddWishlistItemsInput {
  "The wishlist ID"
  wishlistId: ID!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "Array of items to be added to the wishlist"
  items: [WishlistItemInput]!
}

"Input for the `removeWishlistItems` mutation"
input RemoveWishlistItemsInput {
  "The wishlist ID"
  wishlistId: ID!

  "Array of items to remove from the wishlist."
  wishlistItemIds: [ID]!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "Product to be down vote"
  productId: ID!
}

####################
# Payloads
# These types are used as return values for mutation calls
####################

# "Details about a WishlistItemInput that failed to be added to a wishlist due to a price mismatch"
# type IncorrectPriceFailureDetails {
#   "The current price in the system for this product configuration in the requested currency"
#   currentPrice: Money!

#   "The productConfiguration that was provided with the WishlistItemInput that caused this failure"
#   productConfiguration: ProductConfiguration!

#   "The price that was provided with the WishlistItemInput that caused this failure"
#   providedPrice: Money!
# }

"The payload returned from the `createWishlist` mutation call"
type CreateWishlistPayload {
  """
  The created wishlist, if at least one item could be added. Otherwise null, and you should check
  `incorrectPriceFailures` and `minOrderQuantityFailures` for information necessary to display
  errors to the shopper.
  """
  wishlist: Wishlist

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  """
  Clients should check to see if any items failed to be added due to the price not matching the current price.
  In general, a user interface should display the correct current prices to the shopper, confirm that they still
  want to add the items, and then call `createWishlist` or `addWishlistItems` to do so.

  Note that this field will always exist but may be an empty array if there were no failures of this type.
  """
  incorrectPriceFailures: [IncorrectPriceFailureDetails]!
}

"The payload returned from the `addWishlistItems` mutation call"
type AddWishlistItemsPayload {
  """
  The modified wishlist. You should check `incorrectPriceFailures` and `minOrderQuantityFailures` for
  information necessary to display errors to the shopper. Some items may not have been added.
  """
  wishlist: Wishlist

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  """
  Clients should check to see if any items failed to be added due to the price not matching the current price.
  In general, a user interface should display the correct current prices to the shopper, confirm that they still
  want to add the items, and then call `createWishlist` or `addWishlistItems` to do so.

  Note that this field will always exist but may be an empty array if there were no failures of this type.
  """
  incorrectPriceFailures: [IncorrectPriceFailureDetails]!
}

"The payload returned from the `removeWishlistItems` mutation call"
type RemoveWishlistItemsPayload {
  "The modified wishlist"
  wishlist: Wishlist!

  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String
}

####################
# Mutations
####################

extend type Mutation {
  "Add item(s) to a wishlist"
  addWishlistItems(
    "Mutation input"
    input: AddWishlistItemsInput!
  ): AddWishlistItemsPayload!

  "Create a new wishlist"
  createWishlist(
    "Mutation input"
    input: CreateWishlistInput!
  ): CreateWishlistPayload!

  "Remove item(s) from a wishlist"
  removeWishlistItems(
    "Mutation input"
    input: RemoveWishlistItemsInput!): RemoveWishlistItemsPayload!
}
